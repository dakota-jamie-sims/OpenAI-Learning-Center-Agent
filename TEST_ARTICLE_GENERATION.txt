TEST ARTICLE GENERATION - PRODUCTION READY SYSTEM
=================================================

Test the complete multi-agent system with GPT-5 models and real KB search.

SYSTEM STATUS (as of 2025-08-21)
--------------------------------
✅ GPT-5 Integration Complete (gpt-5, gpt-5-mini, gpt-5-nano)
✅ Production KB Search Working (397 Dakota files)
✅ Serper Web Search Integrated
✅ All PRs Merged (#33-37, #29, #38-39 applied)
✅ OpenAI Responses API Throughout
✅ Proper Error Handling for Missing Responses
✅ Production-Ready Features Added:
   - Circuit breaker pattern for fault tolerance
   - Rate limiting (20 LLM/min, 30 searches/min)
   - Caching with TTL for expensive operations
   - Comprehensive metrics and health checks
   - Retry logic with exponential backoff
   - Fallback content generation
   - Parallel research processing
✅ Estimated Cost: $0.50-$1.50 per article

PREREQUISITES
-------------
1. Ensure .env file contains:
   - OPENAI_API_KEY=your_key_here
   - SERPER_API_KEY=your_key_here

2. Install dependencies (if not already done):
   cd "/Users/jamiesims/Library/CloudStorage/GoogleDrive-jsims@dakota.com/My Drive/learning-center-agent-open-ai"
   ./venv/bin/python -m pip install -r requirements.txt

TESTING THE SYSTEM
------------------
cd "/Users/jamiesims/Library/CloudStorage/GoogleDrive-jsims@dakota.com/My Drive/learning-center-agent-open-ai"

# RECOMMENDED: Production System with Enhanced Features
./venv/bin/python scripts/generate_article_production.py --topic "private equity secondaries market 2025 trends" --metrics

# Production system options:
# Show help:
./venv/bin/python scripts/generate_article_production.py --help

# Check system health:
./venv/bin/python scripts/generate_article_production.py --health-check

# Generate article with metrics:
./venv/bin/python scripts/generate_article_production.py --topic "your topic" --word-count 2000 --metrics

# Original Multi-Agent System (still works but use production for reliability)
./venv/bin/python scripts/generate_multi_agent_article.py --topic "private equity secondaries market 2025 trends"

# Alternative test topics:
./venv/bin/python scripts/generate_article_production.py --topic "AI in portfolio management for institutional investors" --metrics
./venv/bin/python scripts/generate_article_production.py --topic "ESG integration in alternative investments 2025" --metrics
./venv/bin/python scripts/generate_article_production.py --topic "Family office investment strategies post-COVID" --metrics

# Quick demo (uses default topic):
./venv/bin/python scripts/quick_article_demo.py

# Legacy orchestrators (still available but not recommended):
./venv/bin/python scripts/generate_article.py --topic "your topic" --orchestrator simple
./venv/bin/python scripts/generate_enhanced_article.py --topic "your topic"

WHAT THE SYSTEM DOES
--------------------
1. Research Phase (Parallel Execution):
   - Web search via Serper API (configurable timeout)
   - Dakota KB search (configurable timeout) 
   - Dakota insights search (configurable timeout)
   - Handles missing/failed searches gracefully
   - Circuit breaker prevents cascading failures
   - Rate limiting ensures API compliance

2. Writing Phase:
   - Creates comprehensive article structure
   - Adds proper citations (min 10 sources)
   - Applies Dakota institutional style
   - Targets specified word count

3. Quality Phase:
   - Fact checking and validation
   - Compliance verification
   - Readability optimization
   - Final approval process

4. Publishing Phase:
   - SEO optimization
   - Metadata generation
   - Social media content
   - Distribution planning

OUTPUT
------
Production articles saved to: output/articles/prod_<topic>_YYYYMMDD_HHMMSS.md
Original system saves to: output/YYYY-MM-DD_HH-MM-SS_article_topic_name.md
Includes: Full article, metadata, quality scores, generation metrics, phase timings

MONITORING
----------
Watch the console for:
- Agent status updates
- Research progress
- Quality scores
- Final generation time
- Phase-by-phase timing breakdown
- Circuit breaker status
- Cache hit rates (with --metrics flag)
- Any errors (will be handled gracefully with fallbacks)

TROUBLESHOOTING
---------------
If you encounter issues:
1. Check API keys in .env file
2. Ensure you're using the virtual environment
3. Check context/JOURNAL.md for recent changes
4. Verify internet connection for web search
5. Cost warning: Each article costs $0.50-$1.50 in API fees