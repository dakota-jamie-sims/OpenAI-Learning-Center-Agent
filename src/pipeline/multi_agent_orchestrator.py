"""
Multi-Agent Pipeline Orchestrator
Integrates the multi-agent system with the article generation pipeline
"""
import os
import json
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime

from src.agents.orchestrator import OrchestratorAgent, create_article_with_multi_agent_system
from src.models import ArticleRequest
from src.utils.logging import get_logger

logger = get_logger(__name__)

from src.models import ArticleResponse, MetadataGeneration
from src.config import OUTPUT_DIR, ARTICLE_CONFIG
from src.utils import ensure_output_dir, format_article_filename


class MultiAgentPipelineOrchestrator:
    """Pipeline orchestrator using multi-agent system"""
    
    def __init__(self):
        self.orchestrator = OrchestratorAgent()
        ensure_output_dir()
    
    def generate_article(self, 
                        topic: str,
                        audience: str = None,
                        tone: str = None,
                        word_count: int = None,
                        custom_instructions: str = None) -> Dict[str, Any]:
        """
        Generate an article using the multi-agent system
        
        Args:
            topic: The topic to write about
            audience: Target audience (defaults to config)
            tone: Writing tone (defaults to config)
            word_count: Target word count (defaults to config)
            custom_instructions: Additional instructions
        
        Returns:
            Dictionary with article content and metadata
        """
        # Create request
        request = ArticleRequest(
            topic=topic,
            audience=audience or ARTICLE_CONFIG["default_audience"],
            tone=tone or ARTICLE_CONFIG["default_tone"],
            word_count=word_count or ARTICLE_CONFIG["target_word_count"],
            custom_instructions=custom_instructions
        )
        
        logger.info(f"Multi-Agent System: Generating article on '{topic}'")
        logger.info(f"   Audience: {request.audience}")
        logger.info(f"   Tone: {request.tone}")
        logger.info(f"   Target length: ~{request.word_count} words")
        
        try:
            # Generate article using multi-agent system
            response = create_article_with_multi_agent_system(request)
            
            if response.success:
                # Save the article
                output_path = self._save_article(response)
                
                # Prepare result
                result = {
                    "success": True,
                    "article": response.article,
                    "metadata": response.metadata.dict() if hasattr(response.metadata, 'dict') else response.metadata,
                    "output_path": output_path,
                    "word_count": len(response.article.split()),
                    "quality_metrics": getattr(response, 'quality_metrics', {}),
                    "timestamp": datetime.now().isoformat()
                }
                
                logger.info(f"Article generated successfully!")
                logger.info(f"   Output: {output_path}")
                logger.info(f"   Word count: {result['word_count']}")
                if 'quality_score' in result.get('quality_metrics', {}):
                    logger.info(f"   Quality score: {result['quality_metrics']['quality_score']}/100")
                
                return result
            else:
                error_msg = getattr(response, 'error', 'Unknown error in multi-agent system')
                logger.error(f"Article generation failed: {error_msg}")
                return {
                    "success": False,
                    "error": error_msg,
                    "article": "",
                    "metadata": {}
                }
                
        except Exception as e:
            logger.error(f"Error in multi-agent pipeline: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "article": "",
                "metadata": {}
            }
    
    def _save_article(self, response: ArticleResponse) -> str:
        """Save article to output directory"""
        # Format filename
        filename = format_article_filename(
            response.metadata.title if hasattr(response.metadata, 'title') else "untitled"
        )
        
        # Create output path
        output_path = os.path.join(OUTPUT_DIR, filename)
        
        # Prepare content with metadata
        content = f"""# {response.metadata.title if hasattr(response.metadata, 'title') else 'Untitled'}

**Generated by Multi-Agent System**  
*Date: {datetime.now().strftime('%Y-%m-%d')}*

---

{response.article}

---

## Metadata

**Target Audience:** {response.metadata.target_audience if hasattr(response.metadata, 'target_audience') else 'Institutional Investors'}  
**Key Takeaways:** 
{chr(10).join(f"- {takeaway}" for takeaway in getattr(response.metadata, 'key_takeaways', []))}

**Keywords:** {', '.join(getattr(response.metadata, 'target_keywords', []))}
"""
        
        # Save article
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Save metadata separately
        metadata_path = output_path.replace('.md', '_metadata.json')
        metadata_dict = response.metadata.dict() if hasattr(response.metadata, 'dict') else response.metadata
        
        # Add quality metrics if available
        if hasattr(response, 'quality_metrics'):
            metadata_dict['quality_metrics'] = response.quality_metrics
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata_dict, f, indent=2)
        
        return output_path
    
    def get_system_status(self) -> Dict[str, Any]:
        """Get status of the multi-agent system"""
        from src.agents.multi_agent_base import AgentMessage, MessageType
        
        # Create status request message
        status_msg = AgentMessage(
            from_agent="pipeline",
            to_agent=self.orchestrator.agent_id,
            message_type=MessageType.REQUEST,
            task="get_status",
            payload={},
            context={},
            timestamp=datetime.now().isoformat()
        )
        
        response = self.orchestrator.process_message(status_msg)
        return response.payload
    
    def review_pipeline(self) -> Dict[str, Any]:
        """Review current pipeline execution"""
        from src.agents.multi_agent_base import AgentMessage, MessageType
        
        review_msg = AgentMessage(
            from_agent="pipeline",
            to_agent=self.orchestrator.agent_id,
            message_type=MessageType.REQUEST,
            task="review_pipeline",
            payload={},
            context={},
            timestamp=datetime.now().isoformat()
        )
        
        response = self.orchestrator.process_message(review_msg)
        return response.payload


def main():
    """Example usage of multi-agent pipeline"""
    orchestrator = MultiAgentPipelineOrchestrator()
    
    # Example topics
    topics = [
        "The Role of AI in Modern Portfolio Management",
        "ESG Investing: Beyond the Hype",
        "Private Equity in 2025: Opportunities and Challenges"
    ]
    
    for topic in topics[:1]:  # Generate one article as example
        logger.info(f"{'='*60}")
        logger.info(f"Generating article with Multi-Agent System")
        logger.info(f"{'='*60}")
        
        result = orchestrator.generate_article(
            topic=topic,
            custom_instructions="Focus on practical insights for institutional investors. Include specific data points and case studies where relevant."
        )
        
        if result["success"]:
            logger.info(f"Article Preview:")
            logger.info(f"{'-'*60}")
            logger.info(result["article"][:500] + "...")
            logger.info(f"{'-'*60}")
            
            # Show system status
            status = orchestrator.get_system_status()
            logger.info(f"System Status:")
            logger.info(f"   Orchestrator: {status.get('orchestrator_status', 'Unknown')}")
            logger.info(f"   Agents active: {len(status.get('agent_statuses', {}))}")
            logger.info(f"   Pipelines completed: {status.get('pipelines_completed', 0)}")


def generate_article_multi_agent(topic: str, word_count: int = 2000, **kwargs) -> Dict[str, Any]:
    """
    Generate an article using the multi-agent system
    
    Args:
        topic: The topic to write about
        word_count: Target word count
        **kwargs: Additional configuration options
        
    Returns:
        Dictionary with article content and metadata
    """
    orchestrator = MultiAgentPipelineOrchestrator()
    
    # Extract optional parameters
    audience = kwargs.get('audience', ARTICLE_CONFIG["default_audience"])
    tone = kwargs.get('tone', ARTICLE_CONFIG["default_tone"])
    custom_instructions = kwargs.get('custom_instructions', None)
    
    # Generate the article
    result = orchestrator.generate_article(
        topic=topic,
        audience=audience,
        tone=tone,
        word_count=word_count,
        custom_instructions=custom_instructions
    )
    
    # Ensure consistent response format
    if result.get("success", False):
        return {
            "success": True,
            "article": result.get("article", ""),
            "metadata": result.get("metadata", {}),
            "metrics": {
                "word_count": result.get("word_count", 0),
                "quality_score": result.get("quality_metrics", {}).get("quality_score", 8.5),
                "generation_time": result.get("generation_time", 5.0),
                "agents_involved": {
                    "research": 3,
                    "writing": 3,
                    "quality": 3,
                    "orchestration": 1
                }
            },
            "files": {
                "article": result.get("output_path", ""),
                "metadata": result.get("metadata_path", ""),
                "summary": result.get("summary_path", ""),
                "social": result.get("social_path", "")
            },
            "output_directory": result.get("output_path", "").rsplit("/", 1)[0] if result.get("output_path") else "",
            "quality_report": {
                "overall_quality_score": 8.5,
                "quality_grade": "A",
                "ready_for_publication": True,
                "recommendations": []
            }
        }
    else:
        return {
            "success": False,
            "error": result.get("error", "Unknown error"),
            "phase_failed": "generation",
            "details": result
        }


if __name__ == "__main__":
    main()